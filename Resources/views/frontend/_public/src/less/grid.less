/* ==========================================================================
   #LAYOUT
   ========================================================================== */

/**
 * Grid-like layout system.
 *
 * The layout object provides us with a column-style layout system. This file
 * contains the basic structural elements, but classes should be complemented
 * with width utilities, for example:
 *
 *   <div class="sg-layout">
 *     <div class="sg-layout__item  u-1/2">
 *     </div>
 *     <div class="sg-layout__item  u-1/2">
 *     </div>
 *   </div>
 *
 * The above will create a two-column structure in which each column will
 * fluidly fill half of the width of the parent. We can have more complex
 * systems:
 *
 *   <div class="sg-layout">
 *     <div class="sg-layout__item  u-1/1  u-1/3@medium">
 *     </div>
 *     <div class="sg-layout__item  u-1/2  u-1/3@medium">
 *     </div>
 *     <div class="sg-layout__item  u-1/2  u-1/3@medium">
 *     </div>
 *   </div>
 *
 * The above will create a system in which the first item will be 100% width
 * until we enter our medium breakpoint, when it will become 33.333% width. The
 * second and third items will be 50% of their parent, until they also become
 * 33.333% width at the medium breakpoint.
 *
 * We can also manipulate entire layout systems by adding a series of modifiers
 * to the `.sg-layout` block. For example:
 *
 *   <div class="sg-layout  sg-layout--reverse">
 *
 * This will reverse the displayed order of the system so that it runs in the
 * opposite order to our source, effectively flipping the system over.
 *
 *   <div class="sg-layout  sg-layout--[right|center]">
 *
 * This will cause the system to fill up from either the centre or the right
 * hand side. Default behaviour is to fill up the layout system from the left.
 *
 * There are plenty more options available to us: explore them below.
 */



/* Default/mandatory classes.
   ========================================================================== */

/**
 * 1. Allows us to use the layout object on any type of element.
 * 2. We need to defensively reset any box-model properties.
 * 3. Use the negative margin trick for multi-row grids:
 *    http://csswizardry.com/2011/08/building-better-grid-systems/
 * 4. Remove whitespace between items
 */

.sg-layout {
  display: block; /* [1] */
  margin:  0; /* [2] */
  padding: 0; /* [2] */
  list-style: none; /* [1] */
  .unitize(margin-left, -24); /* [3] */
  font-size: 0; /* [4] */
}


/**
 * 1. Required in order to combine fluid widths with fixed gutters.
 * 2. Allows us to manipulate grids vertically, with text-level properties,
 *    etc.
 * 3. Default item alignment is with the tops of each other, like most
 *    traditional grid/layout systems.
 * 4. By default, all layout items are full-width (mobile first).
 * 5. Gutters provided by left padding:
 *    http://csswizardry.com/2011/08/building-better-grid-systems/
 * 6. Fallback for old IEs not supporting `rem` values.
 */

.sg-layout__item {
  box-sizing: border-box; /* [1] */
  display: inline-block; /* [2] */
  vertical-align: top; /* [3] */
  width: 100%; /* [4] */
  .unitize(padding-left, 24); /* [5] */

  .unitize(font-size, 16); /* [6] */
  font-size: 1rem;
}


.u-1\/8 {
  width: (100/8%) !important;

}

.u-1\/12 {
  width: (100/12%) !important;
}

.u-2\/12 {
  width: (100/6%) !important;
}

.u-1\/3 {
  width: (100/3%) !important;
}

.u-1\/1\@mobile {
  @media (max-width: 767px) {
    width: 100% !important;
  }
}


.u-1\/4\@mobile {
  @media (max-width: 767px) {
    width: (100/4%) !important;
  }
}

